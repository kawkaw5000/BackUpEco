@{
    ViewData["Title"] = "Subscribers";
}
<link href="~/css/user-profiles.css" rel="stylesheet" />
<link href="~/css/welcome-admin.css" rel="stylesheet" />
<link href="~/css/header.css" rel="stylesheet" />
<link href="~/css/sidebar.css" rel="stylesheet" />
<link href="~/css/modal-approval.css" rel="stylesheet" />
<link href="~/css/subscriber-style.css" rel="stylesheet" />
<link href="~/css/charts.css" rel="stylesheet" />

<div style="margin-left: 115px; margin-top: 70px; margin-right: 10px; margin-bottom:0px;">
    <h2>Subscribers</h2>
</div>
<div class="subscriber-cont">
    <div class="subs-card">
        <h2>Active</h2>
        <h2>Subscribers</h2>
        <div class="user-counts">
            <img src="/images/Create-icons/profile-user (2).png" />
            <p>@Model.ActiveSubscribersCount</p>
        </div>
    </div>
    <div class="subs-card">
        <h2>Monthly</h2>
        <h2>Subscribers</h2>
        <div class="user-counts">
            <img src="/images/Create-icons/profile-user (2).png" />
            <p>@Model.CurrentMonthSubscribersCount</p>
        </div>
    </div>
    <div class="subs-card">
        <h2>Annual</h2>
        <h2>Subscribers</h2>
        <div class="user-counts">
            <img src="/images/Create-icons/profile-user (2).png" />
            <p>@Model.CurrentYearSubscribersCount</p>
        </div>
    </div>
</div>

<div class="chart-cont">
    <div class="pieChart">
        <h2>Current Plans</h2>
        <canvas id="myPieChart"></canvas>
    </div>

    <div class="charts" style="width: 70%; max-width: 600px; margin: auto; margin-top: 40px;">
        <div class="bar-title">
            <h2>Sales Chart</h2>
        </div>
        <label for="timePeriod">Filter by: </label>
        <select id="timePeriod">
            <option value="yearly">Yearly</option>
            <option value="monthly">Monthly</option>
        </select>

        <div id="yearSelector" style="display: none; margin-top: 10px;">
            <label for="year">Select Year: </label>
            <select id="year">
                @for (int year = 2024; year <= 2030; year++)
                {
                    <option value="@year">@year</option>
                }
            </select>
        </div>

        <div id="dateRangeSelector" style="display: none; margin-top: 10px;">
            <label for="startDate">Start Date: </label>
            <input type="date" id="startDate">
            <label for="endDate">End Date: </label>
            <input type="date" id="endDate">
        </div>

        <div class="generate-btn">
            <button id="generateReportButton" class="btn btn-primary" style="margin-top: 20px;">Generate Sales Report</button>
        </div>

        <canvas id="myBarChart" style="margin-top: 20px;"></canvas>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.getElementById('generateReportButton').addEventListener('click', function () {
        const timePeriod = document.getElementById('timePeriod').value;
        const selectedYear = document.getElementById('year').value;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        // Validate input values
        if (timePeriod === 'monthly' && (!startDate || !endDate)) {
            alert('Please select both a start date and an end date for the monthly report.');
            return;
        }

        // Reformat dates if necessary (e.g., to YYYY-MM-DD)
        const formattedStartDate = formatDate(startDate);
        const formattedEndDate = formatDate(endDate);

        // Build URL
        let url = `/Transaction/GenerateSalesReport?period=${timePeriod}&year=${selectedYear}`;
        if (timePeriod === 'monthly') {
            url += `&startDate=${formattedStartDate}&endDate=${formattedEndDate}`;
        }

        console.log('Redirecting to:', url); // Debugging log
        window.location.href = url;
    });

    // Helper function to format dates to YYYY-MM-DD
    function formatDate(date) {
        if (!date) return '';
        const d = new Date(date);
        const year = d.getFullYear();
        const month = String(d.getMonth() + 1).padStart(2, '0');
        const day = String(d.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

</script>
<script>
    const pieLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.PieChartData.labels));
    const pieData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.PieChartData.data));
    const pieColors = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.PieChartData.colors));

    const ctxPie = document.getElementById('myPieChart').getContext('2d');
    const myPieChart = new Chart(ctxPie, {
        type: 'pie',
        data: {
            labels: pieLabels,
            datasets: [{
                label: 'Total Subscribers',
                data: pieData,
                backgroundColor: pieColors,
                hoverOffset: 4
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { position: 'top' },
                tooltip: { enabled: true }
            }
        }
    });

    const yearlyData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.YearlyCounts));
    const yearlyLabels = ['2024', '2025', '2026', '2027', '2028', '2029', '2030'];

    const monthlyDataByYear = {
    @foreach (var year in Model.MonthlyCounts)
    {
        <text>'@year.Key': @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(year.Value)), </text>
    }
        };

    const monthlyLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

    const ctxBar = document.getElementById('myBarChart').getContext('2d');
    let myBarChart = new Chart(ctxBar, {
        type: 'bar',
        data: {
            labels: yearlyLabels,
            datasets: [{
                label: 'Subscriber Count',
                data: yearlyData,
                backgroundColor: '#307a59',
                borderColor: '#307a59',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: { beginAtZero: true }
            },
            plugins: {
                legend: { display: true, position: 'top' }
            }
        }
    });

    function updateChartData(period, year = null) {
        if (period === 'yearly') {
            myBarChart.data.labels = yearlyLabels;
            myBarChart.data.datasets[0].data = yearlyData;
            document.getElementById('yearSelector').style.display = 'none';
            document.getElementById('dateRangeSelector').style.display = 'none';
        } else {
            myBarChart.data.labels = monthlyLabels;
            myBarChart.data.datasets[0].data = monthlyDataByYear[year] || [];
            document.getElementById('yearSelector').style.display = 'none';
            document.getElementById('dateRangeSelector').style.display = 'block';
        }
        myBarChart.update();
    }
    
    function filterMonthlyData(startDate, endDate) {
    if (startDate && endDate) {
        const start = new Date(startDate); // Convert to Date object
        const end = new Date(endDate); // Convert to Date object
        end.setHours(23, 59, 59, 999); // Ensure end date includes the entire day

        // Ensure start date is earlier than end date
        if (start > end) {
            console.error("Start date must be earlier than end date.");
            return;
        }

        // Initialize arrays to hold filtered data
        const filteredData = [];
        const filteredLabels = [];

        // Loop through monthlyDataByYear to filter based on date range
        for (const year in monthlyDataByYear) {
            monthlyDataByYear[year].forEach((data, monthIndex) => {
                const monthStartDate = new Date(year, monthIndex, 1); // First day of the month
                const monthEndDate = new Date(year, monthIndex + 1, 0); // Last day of the month

                // Check if any day within the month's range is within the selected date range
                if ((start <= monthEndDate && end >= monthStartDate)) {
                    // Push data for this month to filtered arrays
                    filteredData.push(data);
                    filteredLabels.push(monthlyLabels[monthIndex]);
                }
            });
        }

        // Update chart with filtered data
        myBarChart.data.labels = filteredLabels;
        myBarChart.data.datasets[0].data = filteredData;
        myBarChart.update();
    }
}


    document.getElementById('timePeriod').addEventListener('change', function () {
        const selectedPeriod = this.value;
        if (selectedPeriod === 'yearly') {
            updateChartData('yearly');
        } else if (selectedPeriod === 'monthly') {
            document.getElementById('dateRangeSelector').style.display = 'block';
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            filterMonthlyData(startDate, endDate);
        }
    });

    document.getElementById('startDate').addEventListener('change', function () {
        const startDate = this.value;
        const endDate = document.getElementById('endDate').value;
        filterMonthlyData(startDate, endDate);
    });

    document.getElementById('endDate').addEventListener('change', function () {
        const startDate = document.getElementById('startDate').value;
        const endDate = this.value;
        filterMonthlyData(startDate, endDate);
    });

</script>

